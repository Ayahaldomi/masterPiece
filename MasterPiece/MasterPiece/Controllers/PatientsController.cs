using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MasterPiece.Models;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using System.Drawing;
using Syncfusion.Pdf.Grid;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;

namespace MasterPiece.Controllers
{
    public class PatientsController : Controller
    {
        private MasterPieceEntities db = new MasterPieceEntities();

        public ActionResult DownloadPdf()
        {
            // Create a memory stream to hold the PDF
            using (MemoryStream memoryStream = new MemoryStream())
            {
                // Initialize the iTextSharp Document
                Document document = new Document(PageSize.A4, 25, 25, 30, 30);
                PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

                // Open the document to write content
                document.Open();

                // Add content to the document
                document.Add(new Paragraph("Hello, this is a PDF document!"));
                document.Add(new Paragraph("Generated by iTextSharp in ASP.NET MVC."));

                // Add more content as needed
                // For example, document.Add(new Paragraph("Your dynamic data here"));

                // Close the document
                document.Close();

                // Return the PDF file as a downloadable file
                byte[] bytes = memoryStream.ToArray();
                memoryStream.Close();

                return File(bytes, "application/pdf", "GeneratedFile.pdf");
            }
        }

        //public ActionResult CreatePDFDocument()
        //{
        //    //Create an instance of PdfDocument.
        //    //Create a new PDF document.
        //    PdfDocument doc = new PdfDocument();
        //    //Add a page.
        //    PdfPage page = doc.Pages.Add();
        //    //Create a PdfGrid.
        //    PdfGrid pdfGrid = new PdfGrid();
        //    //Create a DataTable.
        //    DataTable dataTable = new DataTable();
        //    //Add columns to the DataTable.
        //    dataTable.Columns.Add("ID");
        //    dataTable.Columns.Add("Name");
        //    //Add rows to the DataTable.
        //    dataTable.Rows.Add(new object[] { "E01", "Clay" });
        //    dataTable.Rows.Add(new object[] { "E02", "Thomas" });
        //    dataTable.Rows.Add(new object[] { "E03", "Andrew" });
        //    dataTable.Rows.Add(new object[] { "E04", "Paul" });
        //    dataTable.Rows.Add(new object[] { "E05", "Gary" });
        //    //Assign data source.
        //    pdfGrid.DataSource = dataTable;
        //    //Apply built-in table style
        //    pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        //    //Draw grid to the page of PDF document.
        //    pdfGrid.Draw(page, new PointF(10, 10));
        //    //Open the document in browser after saving it.
        //    doc.Save("Output.pdf", HttpContext.ApplicationInstance.Response, HttpReadType.Save);
        //    //Close the document.
        //    doc.Close(true);
        //    return View();
        //}
        // GET: Patients
        public ActionResult Index()
        {
            return View(db.Patients.ToList());
        }

        // GET: Patients/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Patient patient = db.Patients.Find(id);
            if (patient == null)
            {
                return HttpNotFound();
            }
            return View(patient);
        }

        // GET: Patients/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Patients/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Patient_ID,Full_Name,Date_Of_Birth,Gender,Marital_Status,Nationality,Phone_Number,Home_Address,Note")] Patient patient)
        {
            if (ModelState.IsValid)
            {
                db.Patients.Add(patient);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(patient);
        }

        // GET: Patients/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Patient patient = db.Patients.Find(id);
            if (patient == null)
            {
                return HttpNotFound();
            }
            return View(patient);
        }

        // POST: Patients/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Patient_ID,Full_Name,Date_Of_Birth,Gender,Marital_Status,Nationality,Phone_Number,Home_Address,Note")] Patient patient)
        {
            if (ModelState.IsValid)
            {
                db.Entry(patient).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(patient);
        }

        // GET: Patients/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Patient patient = db.Patients.Find(id);
            if (patient == null)
            {
                return HttpNotFound();
            }
            return View(patient);
        }

        // POST: Patients/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Patient patient = db.Patients.Find(id);
            db.Patients.Remove(patient);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
